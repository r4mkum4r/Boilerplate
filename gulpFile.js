// Generated by CoffeeScript 1.10.0
var _, args, availTasks, clean, concat, defaultTasks, del, destBase, destBaseCSS, destBaseJS, exec, fs, getIncludes, getPath, getTasks, gulp, inject, injectTarget, mainBowerFiles, ngFileSort, nib, path, paths, port, sequence, spawn, srcBase, srcBaseCSS, srcBaseJS, tasks, vendorsPathCSS, vendorsPathJS, watch;

gulp = require('gulp');

watch = require('gulp-watch');

sequence = require('gulp-run-sequence');

inject = require('gulp-inject');

_ = require('lodash');

args = require('yargs').alias('coffee', 'coffee-script').alias('styl', 'stylus').boolean(['coffee', 'stylus', 'less', 'sass'])["default"]('port', 8001).argv;

spawn = require('child_process').spawn;

exec = require('child_process').exec;

fs = require('fs');

path = require('path');

clean = require('gulp-clean');

concat = require('gulp-concat');

ngFileSort = require('gulp-angular-filesort');

nib = require('nib');

del = require('del');

mainBowerFiles = require('main-bower-files');

port = null;

tasks = null;

srcBase = "src/";

srcBaseJS = srcBase + "js/**/";

srcBaseCSS = srcBase + "css/**/";

destBase = "dest/";

destBaseJS = destBase + "js/**/";

destBaseCSS = destBase + "css/**/";

vendorsPathJS = destBase + "/vendors/js/";

vendorsPathCSS = destBase + "/vendors/styles/";

paths = {
  src: {
    js: srcBaseJS + "*.js",
    coffee: srcBaseJS + "*.coffee",
    css: srcBaseCSS + "*.css",
    stylus: srcBaseCSS + "*.styl",
    less: srcBaseCSS + "*.less",
    sass: srcBaseCSS + "*.scss"
  },
  dest: {
    js: destBaseJS + "*.js",
    css: destBaseCSS + "*.css"
  },
  vendors: {
    js: vendorsPathJS + "/**/*.js",
    css: vendorsPathCSS + "/**/*.css"
  }
};

availTasks = ['coffee', 'stylus', 'less', 'sass', 'js', 'css'];

defaultTasks = ['demon', 'js', 'css', 'watch'];

injectTarget = 'index.html';

getTasks = function(args) {
  var _tasks;
  _tasks = [];
  _.forOwn(args, function(value, key) {
    var task;
    if (value === true) {
      task = _.findWhere(availTasks, key);
      if (task) {
        return _tasks.push(task);
      }
    }
  });
  return _.uniq(_tasks);
};

getIncludes = function() {
  return fs.readFileSync('includes.json', {
    encoding: 'utf8'
  });
};

getPath = function(path) {
  var _path;
  _path = path.split('/');
  _path.splice(1, 1);
  return _path.join('/');
};

gulp.task('cleanCSS', function() {
  return gulp.src(paths.dest.css, {
    read: false
  }).pipe(clean());
});

gulp.task('cleanJS', function() {
  return gulp.src(paths.dest.js, {
    read: false
  }).pipe(clean());
});

gulp.task('js', ['cleanJS'], function() {
  return gulp.src(paths.src.js).pipe(gulp.dest(destBase + "js/"));
});

gulp.task('cleanVendor:js', function() {
  return gulp.src(paths.vendors.js, {
    read: false
  }).pipe(clean());
});

gulp.task('cleanVendor:css', function() {
  return gulp.src(paths.vendors.css, {
    read: false
  }).pipe(clean());
});

gulp.task('css', ['cleanCSS'], function() {
  return gulp.src(paths.src.css).pipe(gulp.dest(destBase + "css/"));
});

gulp.task('inject:author', function() {
  var _sources, _target;
  _target = gulp.src(injectTarget);
  _sources = gulp.src(["" + paths.dest.js, "" + paths.dest.css], {
    read: false
  });
  return _target.pipe(inject(_sources)).pipe(gulp.dest("./"));
});

gulp.task('inject:vendor', function() {
  var _includesCSS, _includesJS, _sources, _target;
  _target = gulp.src(injectTarget);
  _includesJS = JSON.parse(getIncludes()).deps.js;
  _includesCSS = JSON.parse(getIncludes()).deps.css;
  gulp.src(_includesJS).pipe(concat('vendors.js')).pipe(gulp.dest(vendorsPathJS));
  gulp.src(_includesCSS).pipe(concat('vendors.css')).pipe(gulp.dest(vendorsPathCSS));
  _sources = gulp.src(["" + paths.vendors.js, "" + paths.vendors.css], {
    read: false
  });
  return _target.pipe(inject(_sources, {
    name: 'vendor'
  })).pipe(gulp.dest('./'));
});

gulp.task('inject', function() {
  return sequence('inject:vendor', 'inject:author');
});

gulp.task('demon', function() {
  var python;
  port = port || args.port;
  return python = spawn('python', ["-m", "SimpleHTTPServer", "" + port], {
    stdio: 'inherit',
    stderr: 'inherit'
  });
});

gulp.task('watch', function() {
  gulp.watch(paths.src.js, ['js']);
  gulp.watch(paths.src.css, ['css']);
  return gulp.watch(destBase + "**/*.*", ['inject']);
});

gulp.task('default', function() {
  port = args.port;
  return sequence('js', 'css', 'cleanVendor:js', 'cleanVendor:css', 'inject', 'watch');
});
